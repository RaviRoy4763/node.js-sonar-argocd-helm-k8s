pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/RaviRoy4763/node.js-sonar-argocd-helm-k8s'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=ticktack \
                    -Dsonar.projectKey=ticktack'''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh 'docker build -t tictak .'
                        sh 'docker tag tictak ravi4763/tictak:latest'
                        sh 'docker push ravi4763/tictak:latest'
                    }
                }
            }
        }
        stage('TRIVY') {
            steps {
                sh 'trivy image ravi4763/tictak:latest > trivyimage.txt'
            }
        }
        stage('Deploy to container') {
            steps {
                sh '''
                # Stop any container using port 8081
                CONTAINER_ID=$(docker ps -q --filter "publish=8081")
                if [ ! -z "$CONTAINER_ID" ]; then
                    docker stop $CONTAINER_ID
                    docker rm $CONTAINER_ID
                fi

                # Run the new container
                docker run -d --restart unless-stopped -p 8081:80 ravi4763/tictak:latest
                '''
            }
        }
        stage('Update Deployment File') {
    environment {
        GIT_REPO_NAME = 'node.js-sonar-argocd-helm-k8s'
        GIT_USER_NAME = 'RaviRoy4763'
    }
    steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                git config user.email "ravitejaroy4763@gmail.com"
                git config user.name "Raviteja"
                BUILD_NUMBER=${BUILD_NUMBER}

                # Update the deployment file
                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" Kubernets/deployment.yml

                # Stage the file
                git add Kubernets/deployment.yml

                # Commit only if there are changes
                git diff --cached --quiet || git commit -m "Update deployment image to version ${BUILD_NUMBER}"

                # Pull remote changes first to avoid push rejection
                git pull --rebase https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main

                # Push changes
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
        }
    }
}

    } // end of stages
} // end of pipeline
